#!/usr/bin/env bash
# -----------------------------------------------
# This idempotent macOS Bash script configures
# git globals user name and password,
# ~/.gitignore and custom settings
# -----------------------------------------------

# Exit script on any errors
set -e

# ADD your CUSTOM configuration here "<setting>:<value>"
git_custom_settings=(
  "init.defaultBranch:main"
  "pull.ff:only"
)

echo "Configuring Git Globals:"

# Configure Git Globals
git_config_settings=()

# Determine global user settings
git_user_settings=(
  user.name
  user.email
)
for user_setting in ${git_user_settings[@]}; do
  if [[ `git config --global "${user_setting}"` == "" ]]; then
    read -p "Please ENTER the ${user_setting} to set in your git globals: " setting_value
    echo "...using [${setting_value}] for ${user_setting}"
    # Add to the git config settings for later
    git_config_settings+=("${user_setting}:${setting_value}")
  fi
done
echo -n '.'

# Determine global gitignore file
if [[ `git config --global core.excludesfile` == "" ]]; then
  echo "Creating ~/.gitignore"
  test -e ~/.gitignore || \
    cat << EOF > ~/.gitignore
# Global gitignore

# Mac
.DS_Store

# IDEs
.idea/
.vscode/
EOF

  # Add gitignore configuration
  git_config_settings+=("core.excludesfile:~/.gitignore")
fi
echo -n '.'

# Configure git settings
# Add custom settings
git_config_settings+=("${git_custom_settings[@]}")
for config_setting in ${git_config_settings[@]}; do
  # Split into setting (:) value
  IFS=':' read -r -a setting_value <<< "$config_setting"
  setting="${setting_value[0]}"
  value="${setting_value[1]}"
  if [[ `git config --global "${setting}"` == "" ]]; then
    echo "Setting [${setting}] to [${value}]"
    git config --global "${setting}" "${value}"
  fi
done
echo -n '.'

echo -e "\nGit Configuration..."
git config --list

# --- FIN ---
echo 'âœ”'
exit 0
